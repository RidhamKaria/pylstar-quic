from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey, X25519PublicKey
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from donna25519 import PrivateKey, PublicKey

from Crypto.Cipher import AES

from caching.SessionModel import SessionModel
from util.SessionInstance import SessionInstance
from crypto.dhke import dhke

# c_pub_k = 9267f763f7aacc047ffad175142a0924bf0b64f38b2e7acf93517a1ba045cd75
c_pri_k = "52066b56cd9006095d82210d21a8a6481dd8111ccd83e1852dee7bc9a4362f5c"
s_pub_key = "522a36e95b88e07758840db6ed0f2c501cfb0bcc5bd12c6843b940c81010d631"
# s_pri_key = f8f5ebc81ee97c172c67c3379a950093d8ae06871f97281468751211db9c9c62
# derived_key = e791ca755d1f4894ad1a1000abe7fe56 + 8b378d247857df3be2f9ab15f8193ad8 + b6bd39d8 + 20ef9dfe


forward_secure = True

# 1. Load my key
private_key = PrivateKey(secret=bytes.fromhex(c_pri_k))
peer_public_value = bytes.fromhex(s_pub_key)
# 2. compute the shared secret
if len(peer_public_value) != 32:
    raise Exception("Invalid length of peer public value, should be 32 bytes received {} bytes".format(len(peer_public_value)))

shared_key = private_key.do_exchange(PublicKey(peer_public_value))
print("shared key",shared_key)
# 3. Apply the kdf
info = bytes.fromhex("5155494320666f727761726420736563757265206b657920657870616e73696f6e00ac7d4c14d9cb217d43484c4f17000000504144001b020000534e49002402000053544b0060020000534e4f0098020000564552009c02000043435300ac0200004e4f4e43cc02000041454144d002000055414944dc02000053434944ec02000054434944f002000050444d44f4020000534d484cf80200004943534cfc020000505542531c0300004d4944532003000053434c53240300004b45585328030000584c43543003000043534354300300004343525438030000434643573c03000053464357400300002d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d6c6f63616c686f7374f719e7d6c60f54d4ec7645cbfddfce5424e2fa120c65e641cf9f054a2c5e8164629b99a294d3a2e3adcba1d66f28132e320de4ee802d9745aba306d69fff654626a0085b749ae21ecabbbfa4a4ab42ca375e8525081ee46a53af22221623f5b1bd72874b848d800f2cabcf558480f5bcc69ed66e5130343301e8816092921ae87eed8086a2158291a34d4f650000000000000000f3ae0afbbd89f7fff6db1ab2a5b283bb8d3f0a2f414553476c73717569632f342e302e315d43af1f50f133689dd026da751965b30000000058353039010000001e0000009267f763f7aacc047ffad175142a0924bf0b64f38b2e7acf93517a1ba045cd756400000001000000433235353e9f2d138eb2b48b3e9f2d138eb2b48b0000f0000000600053434647080000005645520018000000414541441c000000534349442c00000050444d443000000050554253530000004b455853570000004f4249545f0000004558505967000000513034335130343651303530ff00001d000000016b3343cf414553475d43af1f50f133689dd026da751965b358353039200000522a36e95b88e07758840db6ed0f2c501cfb0bcc5bd12c6843b940c81010d6314332353500000000000000001a6d50650000000030820309308201f1a00302010202143f5229d6c9afb21246280678d5431ab37c8eb714300d06092a864886f70d01010b050030143112301006035504030c096c6f63616c686f7374301e170d3233313032313034353235325a170d3233313132303034353235325a30143112301006035504030c096c6f63616c686f737430820122300d06092a864886f70d01010105000382010f003082010a0282010100aa7854bd082c3d00c108bad0c90c116e653701fa79279d5b8d04897cb279a4cf0d5c1ef9037016bf6ed11f944069d9c796ecd67c9fe518cbd20d2587b1bd9815b57c8bbf3a7294c26280c998adcc7fc08206c3cdebc8bb2194136d84c93711dcfd727d12388474f746e4d53932577f30865e22f0058bf591f619198c14c2b682a4444fa383183a51f5c9297adda3bdbb425ef321c4a0d9810836faa778fd6bac9582cba03bd7efedb1b93068d9a685fddfb024181d64eb136a2247c005224b459c7ae2b3dff9dcf97cfbb36904603416269756e35a81031117c3991dd1302fe7c1e50ef650e0441ee8239b6177e2e44d9d1e9311ce123bd8ca3d1e62b6b253730203010001a3533051301d0603551d0e0416041468e878da8e11ed16869be3c5cb6d4214974352d5301f0603551d2304183016801468e878da8e11ed16869be3c5cb6d4214974352d5300f0603551d130101ff040530030101ff300d06092a864886f70d01010b050003820101005248182e130b9079eedd92b412fec189a766d234a616983bedabf3d2ef63333a38e1c910f72cff01c591b7db5c2775556f1b332368494d4b3c670266abf6adc2a182d93a2e15f00eeb3c9cbb56af9f229c4e5dff40ed0bc009919d792b2652dfb13343736df32ecdc1f1ba371c17aa9ed580b18e49da016b7d219176826f4ed762b26d2b8789efad19a26799fa762193bf445b9df550ccb3646a8fba107002c0d7ed0e7fc856e40234da6936b1c35429b47375b93a30fbbcf04c489a5a4c59e10a9b70e424e0041cd3cf6ff4105fbf81f43e23cfa9eece12f42c9012c097d39f3cd930e7ba025c862aee2d434b4304344c2f621021d920fda7744acf51aaa010")
        
# salt = bytes.fromhex(SessionInstance.get_instance().client_nonce) # Fixed client nonce
# print("Forward secure? {}".format(forward_secure))
# print("Zero rtt mode? {}".format(SessionInstance.get_instance().zero_rtt))
# print("Using dynamic nonce? {}".format(SessionInstance.get_instance().zero_rtt or forward_secure))
# if forward_secure or SessionInstance.get_instance().zero_rtt:
    # salt = salt + SessionInstance.get_instance().server_nonce  # Appended with dynamic server nonce
    # print("Received server nonce {}".format(SessionInstance.get_instance().server_nonce))
# else:
    # salt += bytes.fromhex("e4d458e2594b930f6d4f77711215adf9ebe99096c479dbf765f41d28646c4b87a0ec735e63cc4f19b9207d369e36968b2b2071ed") # Is it fixed?
s_nonce = "9fff654626a0085b749ae21ecabbbfa4a4ab42ca375e8525081ee46a53af22221623f5b1bd72874b848d800f2cabcf558480f5bcc69ed66e"
c_nonce = "a34d4f650000000000000000f3ae0afbbd89f7fff6db1ab2a5b283bb8d3f0a2f"
salt = bytes.fromhex(c_nonce + s_nonce)
# print("Connection ID")
# print(SessionInstance.get_instance().connection_id)
#
# print(">>>> My Salt <<<<")
# print(salt.hex())
#
# print(">>>> Shared Key <<<<")
# print(shared_key.hex())
#
# print(">>>> Info <<<<")
# print(info.hex())

print("Shared key {}".format(shared_key.hex()))

derived_shared_key = dhke.perform_hkdf(salt, shared_key, info, forward_secure)

print("Derived shared key {}".format({k: v.hex() for k, v in derived_shared_key.items()}))

div_nonce = bytes.fromhex("4b68d6e8b641b9e2977b591222d4a97088060ff71e6ed6f29514bb16b4de7501")
diverse_key = dhke.diversify(derived_shared_key['key2'],derived_shared_key['iv2'],div_nonce)
print(diverse_key)

nonce = diverse_key['diversified_iv'] +bytes.fromhex("03000000")+bytes.fromhex("00000000")
decoder = AES.new(diverse_key['diversified_key'], AES.MODE_GCM, nonce)
print(decoder)
ciphertext = bytes.fromhex("cde52dd4bea5095903e24c6385a02e6865abb554a8b1cb6c53d0fbfa064c09a705049d668903b1d08b607ccb6f76863df5eb1fe475a6ebd0a99ababf97bcb48cd1c2d78fadc378a71faf105b1695c87d6b8c16a45bb409c259b5a40f1dc501a0ca032ad5c5f3e83ae98c57540e1ec219b9614dd4b77e1c64501f5b8ab598bff67a9a54c5e42631d2134faa7c7761d96e33cf6553251ef0b8487cba28fbbae228999b49360388fb2860ba9891aa83dae27d6911bb92e494a42966ef370616896455a6f334145ad2d2b0a9c0be861df3c5bb68e5b50809c48b2ee8e08ae179aba671f4b19b3459506b09f90e6a11b782f87362a4339663f1be0b45cb7a4de7172df2ac5656ba4a81e2b649cf1b7997f5a5afce2149e27d76abbf65e447d20da55105f8f4ad46b099dc37622ec72182c2bc984252c89ea283f79ead09351e02ee5dd353adee6c6883e524b4da0958f2304c50e6722e397bfc2a33e1094cb50e4dcf373a5e59b4460f8dcd82ed2f480b48a5ecf2a80beb6ee5130b87179122759e204c15dc1809c0b715f97656ebb08ba13b7a42e8bd0a5d6595bbf051d5c70506a7bf477493d3f038f1df34c2c41de452716ad117689b6428be672b0282a6ddf5c2613f60af0a241df62ea4816fc4d11b46557722a57a823a9601430dfc49f65b5d5830afdd6d0dbd9e8a3ffbf9a599bb13f103e4fa9ba2deef4c21c85e779133da661cdd65da1ad3b5205a4c7482f7d9aa4d59b3f4cf9dcd7848564734efe637fe06c577bb03a30bf85f64aa8e675d774d9111478d62156733517b7cc8c0b5c69d256c78d30a1db1f9018e8b8ed8450c1c26e47eb2b75154ee520a1fd7bfe7a609952c83044bed5f4a1c80ce4d475c0f342d82f0aa9dac4e937ca1305570dbc00c3949bc7556b6c06cb2faa2dcb580e0f2ccab3f1ef57acb27bf14e97b335eae7782f16f7c48e55a258424901f398373f2cac9f200b0d066c7d5903b532fefdfee65f8b0a4f3093e2574316c05118ac9272e9b78c04a2a63680b2d4deedfd2c189eadc13642517c9ea495e25bda44fb8098a16f48db29c4e40f45521cc6cbdc2fceb34b6bca21cd7d2ffb8e122d41ecf76a12780ac5d3603209ff10c214c89fa51da561324d3f21081588dba318a66f5e6ebf9d1d890f37d3d77a90af870a9b40e2b2f65c8e5d40fde19d6bbc870de3c64f6721e0b8be58bbdd925c909fdb8396fdd8a693c330b188276c657db9d12d0400d30bf45c3523063b5570461663abf0afa0f3add5582e51a0cd9ac8e5336dd1aa3037e8f8585a61ee8081603874464869bb1cfaf1063186ecbd62d197703efcad7553333ebefd2053186375523a717b46ba1403b59148b17a570b3af1d8bd09b94e17ee542d810fc83a0ac76743f567be7bfe6264ebe60338b205631840ef64e16b8349b8ed9eb68cd0a15631b616fe4187386c7eed878d4f20e426c757e01cbc0e8adc0a979d162451b8bc5297b6c08e1c63c1c17e09dceff8b2624bb3e8527a5b73f09021050e8fb1444db19985aca9d4d0855d2f03b898dc6aa99e1a0dd00d3e7cb9030dd7d3b9310cc841102c7f557ffd546c638e5bc34127e2fa1e991a374e58008a341756fe4da849e641891aab840ace213106db2b24d99d2b3a9955b99289f166f9759e972e9f10f827cd2458be4a876cfbe1b301f03276a5dfc9911c4d98659d9bd4f4b4f0163040a8daee2424edcff74c2cd0060659d581ce0b5fe57d0328be1131964e781e16bd7e53a491b9adbc4ad20354119b3614dd8174a5b95081334ed9675b77cbfae0f62200c6f46d017710c545e76a495ac6c4b372dbeba27a4c5744b129f4a3a83c6273be8935395e584b80364e7eb397f32fc74e6c1")
x = decoder.decrypt(ciphertext[:40])

print(x)