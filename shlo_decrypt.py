from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey, X25519PublicKey
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from donna25519 import PrivateKey, PublicKey

from Crypto.Cipher import AES

from caching.SessionModel import SessionModel
from util.SessionInstance import SessionInstance
from crypto.dhke import dhke

# c_pub_k = 9267f763f7aacc047ffad175142a0924bf0b64f38b2e7acf93517a1ba045cd75
c_pri_k = "52066b56cd9006095d82210d21a8a6481dd8111ccd83e1852dee7bc9a4362f5c"
s_pub_key = "9bc546eff3a2c859186aca9f85dee3e1c68f5e7d2f16215039ab641cb7c62d6d"
# s_pri_key = f8f5ebc81ee97c172c67c3379a950093d8ae06871f97281468751211db9c9c62
# derived_key = e791ca755d1f4894ad1a1000abe7fe56 + 8b378d247857df3be2f9ab15f8193ad8 + b6bd39d8 + 20ef9dfe


forward_secure = True

# 1. Load my key
private_key = PrivateKey(secret=bytes.fromhex(c_pri_k))
peer_public_value = bytes.fromhex(s_pub_key)
# 2. compute the shared secret
if len(peer_public_value) != 32:
    raise Exception("Invalid length of peer public value, should be 32 bytes received {} bytes".format(len(peer_public_value)))

shared_key = private_key.do_exchange(PublicKey(peer_public_value))
print("shared key",shared_key)
# 3. Apply the kdf
info = bytes.fromhex("51554943206b657920657870616e73696f6e0047f70781e8e3d95f43484c4f17000000504144001b020000534e49002402000053544b0060020000534e4f0098020000564552009c02000043435300ac0200004e4f4e43cc02000041454144d002000055414944dc02000053434944ec02000054434944f002000050444d44f4020000534d484cf80200004943534cfc020000505542531c0300004d4944532003000053434c53240300004b45585328030000584c43543003000043534354300300004343525438030000434643573c03000053464357400300002d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d6c6f63616c686f73740adbe78c2d5bbac6ace72d3343a31446832c77ad4dca7aa7885bc0a0fa0bc18c451009652593d509cf7c478a64251aaa15baec903fd10580713bc0ab457449e801d4517d96159856cff436a3c6c4b7d17f2f3303c8d58d6f7ddbd889b56cd1c66624407418db8cfc09d5546ca1629ba0120163e95130343301e8816092921ae87eed8086a215829197a84d650000000000000000e6e87d08ff8557ab5faf3061bcb6067146b047c3414553476c73717569632f342e302e3155f662a868e467255d4bf79569e1db100000000058353039010000001e0000009267f763f7aacc047ffad175142a0924bf0b64f38b2e7acf93517a1ba045cd756400000001000000433235353e9f2d138eb2b48b3e9f2d138eb2b48b0000f0000000600053434647080000005645520018000000414541441c000000534349442c00000050444d443000000050554253530000004b455853570000004f4249545f0000004558505967000000513034335130343651303530ff00001d000000016b3343cf4145534755f662a868e467255d4bf79569e1db10583530392000009bc546eff3a2c859186aca9f85dee3e1c68f5e7d2f16215039ab641cb7c62d6d43323535000000000000000017fa4e650000000030820309308201f1a00302010202143f5229d6c9afb21246280678d5431ab37c8eb714300d06092a864886f70d01010b050030143112301006035504030c096c6f63616c686f7374301e170d3233313032313034353235325a170d3233313132303034353235325a30143112301006035504030c096c6f63616c686f737430820122300d06092a864886f70d01010105000382010f003082010a0282010100aa7854bd082c3d00c108bad0c90c116e653701fa79279d5b8d04897cb279a4cf0d5c1ef9037016bf6ed11f944069d9c796ecd67c9fe518cbd20d2587b1bd9815b57c8bbf3a7294c26280c998adcc7fc08206c3cdebc8bb2194136d84c93711dcfd727d12388474f746e4d53932577f30865e22f0058bf591f619198c14c2b682a4444fa383183a51f5c9297adda3bdbb425ef321c4a0d9810836faa778fd6bac9582cba03bd7efedb1b93068d9a685fddfb024181d64eb136a2247c005224b459c7ae2b3dff9dcf97cfbb36904603416269756e35a81031117c3991dd1302fe7c1e50ef650e0441ee8239b6177e2e44d9d1e9311ce123bd8ca3d1e62b6b253730203010001a3533051301d0603551d0e0416041468e878da8e11ed16869be3c5cb6d4214974352d5301f0603551d2304183016801468e878da8e11ed16869be3c5cb6d4214974352d5300f0603551d130101ff040530030101ff300d06092a864886f70d01010b050003820101005248182e130b9079eedd92b412fec189a766d234a616983bedabf3d2ef63333a38e1c910f72cff01c591b7db5c2775556f1b332368494d4b3c670266abf6adc2a182d93a2e15f00eeb3c9cbb56af9f229c4e5dff40ed0bc009919d792b2652dfb13343736df32ecdc1f1ba371c17aa9ed580b18e49da016b7d219176826f4ed762b26d2b8789efad19a26799fa762193bf445b9df550ccb3646a8fba107002c0d7ed0e7fc856e40234da6936b1c35429b47375b93a30fbbcf04c489a5a4c59e10a9b70e424e0041cd3cf6ff4105fbf81f43e23cfa9eece12f42c9012c097d39f3cd930e7ba025c862aee2d434b4304344c2f621021d920fda7744acf51aaa010")
        
# salt = bytes.fromhex(SessionInstance.get_instance().client_nonce) # Fixed client nonce
# print("Forward secure? {}".format(forward_secure))
# print("Zero rtt mode? {}".format(SessionInstance.get_instance().zero_rtt))
# print("Using dynamic nonce? {}".format(SessionInstance.get_instance().zero_rtt or forward_secure))
# if forward_secure or SessionInstance.get_instance().zero_rtt:
    # salt = salt + SessionInstance.get_instance().server_nonce  # Appended with dynamic server nonce
    # print("Received server nonce {}".format(SessionInstance.get_instance().server_nonce))
# else:
    # salt += bytes.fromhex("e4d458e2594b930f6d4f77711215adf9ebe99096c479dbf765f41d28646c4b87a0ec735e63cc4f19b9207d369e36968b2b2071ed") # Is it fixed?
s_nonce = "457449e801d4517d96159856cff436a3c6c4b7d17f2f3303c8d58d6f7ddbd889b56cd1c66624407418db8cfc09d5546ca1629ba0120163e9"
c_nonce = "97a84d650000000000000000e6e87d08ff8557ab5faf3061bcb6067146b047c3"
salt = bytes.fromhex(c_nonce + s_nonce)
# print("Connection ID")
# print(SessionInstance.get_instance().connection_id)
#
# print(">>>> My Salt <<<<")
# print(salt.hex())
#
# print(">>>> Shared Key <<<<")
# print(shared_key.hex())
#
# print(">>>> Info <<<<")
# print(info.hex())

print("Shared key {}".format(shared_key.hex()))

derived_shared_key = dhke.perform_hkdf(salt, shared_key, info, forward_secure)

print("Derived shared key {}".format({k: v.hex() for k, v in derived_shared_key.items()}))

div_nonce = bytes.fromhex("c587fc07e6a8c569e5259feb79be00aff665c9f6744ca72d33cbc4b6289f03ec")
diverse_key = dhke.diversify(derived_shared_key['key2'],derived_shared_key['iv2'],div_nonce)
print(diverse_key)

nonce = diverse_key['diversified_iv'] +bytes.fromhex("03000000")+bytes.fromhex("00000000")
decoder = AES.new(diverse_key['diversified_key'], AES.MODE_GCM, nonce)
print(decoder)
ciphertext = bytes.fromhex("986ad50f36dea9e26faf67060c3c2b1c9f523a5e3261508b4a5ea413b2b4724aacfeedf2339e0bb8212dcc5ba4df72bd4853f02995f8b20c4508082bb8ada090a9c415906aa46f4ce830d126e81b785dd629ea1bbdb933cfa872dc006a729c3a3b68bbb8b0dda22ad43d70159b9b69c1695c6d0a645ca43e529a669043ddd9fce2b67ddd854ffdedcaccebc8aa556df44b7ff8f0adf1aa53cdd04d87bb70a36e706884e1de4f3862ba9f07eca952928b77c434a0d8c51d241451366d39668f46d15c185c632fd70b20a33ef3ad6691f653dbf149dff64d0c56f0cf6d422164400cd25adab5648a6f751e01f23580907cf3be9da99c36d6d83986849d455a9600ab0ad94412f0beb8a60c330787ee303174989954378f46ae9de005213efd0cf1eab3bcf8404bea21d8216f7f2842cc1e1212006f72899391537741b68755048925c4fe1c51d1a1174e85088d9830b3ca8e04fb8676633df13456fa6ec15500aa90a97af6bbcd6b3cd99616eb895fbebaced242f9bec31b930c64eb04e1fb4530ab5dbea4d3e6f25ae222656bceaa528441c2fa377ec826ead10da9b284e50cb43f970b6560021c0bfd1302a665cc2bbe724976ecc65ab5fdb6070d362dd1e394058ebe6b406b036beca23eca4835c901fca5e023b849af246603818f69dacede63c25c8589f7faf0f36873f0619d62dd85b866f483f28ed3e31f266359bd464dd388b695a28c5ec759a655773ffd8e28141cf0246e78116fa8edbeba6ae1a8f9a631a2e8c7f1aa25d992dde85b53f16d8c804ed8ef5b2646f44deefb2bfe6412e50e94b8b8027d3359d7fc061f368a0645acec606f63d4c1da33e6e4b7173d66bdb1cb944458550edf26e4be25ca4cf048c951f4f9d9b2dfb55ad5b90f5546039e556b39791b97830f7f1d409a40d098102a84ee5d0f44fd27de2cf48133726740c597669fe441d98d929bc9e784d2d41cab48440ef8b4bd73b56a83e3d95cd117bdd9a1fdc3a9274eb05382e2bc4d3743aa811976e1105b762ab7e28a079f962f64e23feed4328e12c8b95f8099481d9dcf410e1addf729e54869f5a0870249b95f88b35c1ad926c932e5a31f3ca3d86d80b09b576b0ef3f5ffa5fc9f6727c8172755ecbfeca4ba72c9aca1a7cd3646cfff95074fa41a4bb186866f92b5d51fec2f0b1e2ebbef1f133e32b8311f8e14fc48eb60fa8e4201d039de02c1a0114aada703774faf7f9a45c51a8e4afb19bccc69ae5466165f13af295d13ce9579f1ec9c82e78318bdf33f81fd8e3e479cc433baa9671faf7a5244fe0025d11dbed0e4d1f32208f0d655b11cd332296330faeaf60058566c53aa7755c7bd0c7a5b50e70cd22c72a1a9c3f9182b086d231e952415c6e0479ae2e6d79fe261b95f9af8c8e259a4ea80cea51ca7322b6ea1fef7e0c3b0b407945cf2f6f31e7b593fffceda26f2f18b8aef9894f2a5723bc31719545d3cc17683e4d1c28d023fa63b5cce00219c91ca99f49e77f609bf461d3354db6f564b345413f352c329603e4f3dee3757d2f20d252d71a1e062e7ff22fa688edcd23c20cea94125b813dc3215348a020b76f0a3a5da2327fe7f5bb99685b2ae060ba045a0e8bbb99af43148a2859bfa308cc4dfeda1d9e5498c2938cb84a07e5b52249feebf528d77649ffa589e77b80b5f6506b603a626a3577d1036e48792a0d70de4ef8ba0431483beb4bcf343237cb839a2cb0e5a12d87bfec6b0598aed2402393ee7e8cd6dc7f931aea04c56bcad10fcdf56584f3bcb022d5c1adbe28147f093d16a5624485bc982e6d8e3cf37601fa17406549dd4de2d48e8fcc8a6daacfe159a2a6ce48ae598fc2af4392f8a9f1a5e2a3c4197580c52a039daddc6")
x = decoder.decrypt(ciphertext)

print(x)
print(x[-12:])
print(decoder.hexverify(x[-12:].hex()))
