from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey, X25519PublicKey
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from donna25519 import PrivateKey, PublicKey

from Crypto.Cipher import AES

from caching.SessionModel import SessionModel
from util.SessionInstance import SessionInstance
from crypto.dhke import dhke

# c_pub_k = 8ef7cc0f3a365c56ea469b4d4183c9c7dfc20db6dfbefa86cba468a8075c2275
c_pri_k = "43b7d81b8294023bca13899ea37a985be7d1e4ad34a8e6bb0341b854069bbc6f"
s_pub_key = "cfade4ecd71183fdd96e89f05731c1e43b030d9dfa107b0723182f2a6e8ae20d"
# s_pri_key = 35a7d4e25319378f414077c29786faab87dabeeb58ebaf4530ce70580e68e583
# derived_key = 422e602675eb75d435510026954b9871 + 814b1076ae9db39de108e89a96dd53be + ad168b84 + 54c92b6c


forward_secure = True

# 1. Load my key
private_key = PrivateKey(secret=bytes.fromhex(c_pri_k))
peer_public_value = bytes.fromhex(s_pub_key)
# 2. compute the shared secret
if len(peer_public_value) != 32:
    raise Exception("Invalid length of peer public value, should be 32 bytes received {} bytes".format(len(peer_public_value)))

shared_key = private_key.do_exchange(PublicKey(peer_public_value))
print("shared key",shared_key)
# 3. Apply the kdf
info = bytes.fromhex("51554943206b657920657870616e73696f6e00f5e2497393ae196143484c4f17000000504144001b020000534e49002402000053544b0060020000534e4f0098020000564552009c02000043435300ac0200004e4f4e43cc02000041454144d002000055414944dc02000053434944ec02000054434944f002000050444d44f4020000534d484cf80200004943534cfc020000505542531c0300004d4944532003000053434c53240300004b45585328030000584c43543003000043534354300300004343525438030000434643573c03000053464357400300002d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d6c6f63616c686f7374071b37df84ac74d0483e7f6a44442db2b31735eecff75c206847af11e842cc82e11451fb0c5a7e5ec983281bb97f5ffe5b839122ca0149da96adec35819d06e4d4b9bd0314b811d13b36e8eca192edd0add91e56e203f08d714e98ab3e5c5eca8d18f60fd39b94db102ff3d83e1c517d7a2f56c55130343301e8816092921ae87eed8086a21582914da04f6500000000000000007d853ea127ea1e64a571d6c26dc6a99003388348414553476c73717569632f342e302e310a268a4d07cae4975d88a3ea395865430000000058353039010000001e0000008ef7cc0f3a365c56ea469b4d4183c9c7dfc20db6dfbefa86cba468a8075c22756400000001000000433235353e9f2d138eb2b48b3e9f2d138eb2b48b0000f0000000600053434647080000005645520018000000414541441c000000534349442c00000050444d443000000050554253530000004b455853570000004f4249545f0000004558505967000000513034335130343651303530ff00001d000000016b3343cf414553470a268a4d07cae4975d88a3ea3958654358353039200000cfade4ecd71183fdd96e89f05731c1e43b030d9dfa107b0723182f2a6e8ae20d433235350000000000000000cdf150650000000030820309308201f1a00302010202143f5229d6c9afb21246280678d5431ab37c8eb714300d06092a864886f70d01010b050030143112301006035504030c096c6f63616c686f7374301e170d3233313032313034353235325a170d3233313132303034353235325a30143112301006035504030c096c6f63616c686f737430820122300d06092a864886f70d01010105000382010f003082010a0282010100aa7854bd082c3d00c108bad0c90c116e653701fa79279d5b8d04897cb279a4cf0d5c1ef9037016bf6ed11f944069d9c796ecd67c9fe518cbd20d2587b1bd9815b57c8bbf3a7294c26280c998adcc7fc08206c3cdebc8bb2194136d84c93711dcfd727d12388474f746e4d53932577f30865e22f0058bf591f619198c14c2b682a4444fa383183a51f5c9297adda3bdbb425ef321c4a0d9810836faa778fd6bac9582cba03bd7efedb1b93068d9a685fddfb024181d64eb136a2247c005224b459c7ae2b3dff9dcf97cfbb36904603416269756e35a81031117c3991dd1302fe7c1e50ef650e0441ee8239b6177e2e44d9d1e9311ce123bd8ca3d1e62b6b253730203010001a3533051301d0603551d0e0416041468e878da8e11ed16869be3c5cb6d4214974352d5301f0603551d2304183016801468e878da8e11ed16869be3c5cb6d4214974352d5300f0603551d130101ff040530030101ff300d06092a864886f70d01010b050003820101005248182e130b9079eedd92b412fec189a766d234a616983bedabf3d2ef63333a38e1c910f72cff01c591b7db5c2775556f1b332368494d4b3c670266abf6adc2a182d93a2e15f00eeb3c9cbb56af9f229c4e5dff40ed0bc009919d792b2652dfb13343736df32ecdc1f1ba371c17aa9ed580b18e49da016b7d219176826f4ed762b26d2b8789efad19a26799fa762193bf445b9df550ccb3646a8fba107002c0d7ed0e7fc856e40234da6936b1c35429b47375b93a30fbbcf04c489a5a4c59e10a9b70e424e0041cd3cf6ff4105fbf81f43e23cfa9eece12f42c9012c097d39f3cd930e7ba025c862aee2d434b4304344c2f621021d920fda7744acf51aaa010")
        
# salt = bytes.fromhex(SessionInstance.get_instance().client_nonce) # Fixed client nonce
# print("Forward secure? {}".format(forward_secure))
# print("Zero rtt mode? {}".format(SessionInstance.get_instance().zero_rtt))
# print("Using dynamic nonce? {}".format(SessionInstance.get_instance().zero_rtt or forward_secure))
# if forward_secure or SessionInstance.get_instance().zero_rtt:
    # salt = salt + SessionInstance.get_instance().server_nonce  # Appended with dynamic server nonce
    # print("Received server nonce {}".format(SessionInstance.get_instance().server_nonce))
# else:
    # salt += bytes.fromhex("e4d458e2594b930f6d4f77711215adf9ebe99096c479dbf765f41d28646c4b87a0ec735e63cc4f19b9207d369e36968b2b2071ed") # Is it fixed?
s_nonce = "819d06e4d4b9bd0314b811d13b36e8eca192edd0add91e56e203f08d714e98ab3e5c5eca8d18f60fd39b94db102ff3d83e1c517d7a2f56c5"
c_nonce = "4da04f6500000000000000007d853ea127ea1e64a571d6c26dc6a99003388348"
salt = bytes.fromhex(c_nonce + s_nonce)
# print("Connection ID")
# print(SessionInstance.get_instance().connection_id)
#
# print(">>>> My Salt <<<<")
# print(salt.hex())
#
# print(">>>> Shared Key <<<<")
# print(shared_key.hex())
#
# print(">>>> Info <<<<")
# print(info.hex())

print("Shared key {}".format(shared_key.hex()))

derived_shared_key = dhke.perform_hkdf(salt, shared_key, info, forward_secure)

print("Derived shared key {}".format({k: v.hex() for k, v in derived_shared_key.items()}))

div_nonce = bytes.fromhex("8586837abeb280d6c914606b177654de674996986ab3bc66a2c0422a0d622e5c")
diverse_key = dhke.diversify(derived_shared_key['key2'],derived_shared_key['iv2'],div_nonce)
print(diverse_key)

nonce = diverse_key['diversified_iv'] +bytes.fromhex("03000000")+bytes.fromhex("00000000")
decoder = AES.new(diverse_key['diversified_key'], AES.MODE_GCM, nonce)
print(decoder)
ciphertext = bytes.fromhex("6d3ff8d2bf59f87b7d6929f495a07713e95523f18c361b9e23cba2a9795fc53b657c6a61c8b9d4ad55dc9752d4c66ba2ec1f878f77c845b48cec039a744a345143e6aee92b5ca4ad9cb465e6464df2c2c48e65e6df55a4c8c75da9206b4da881280b4510f268233b7ff145ae53488a82fe33df9a72dcb3808c7087bf9227a788e28aac0cd80687968bbd2a783cacec74fbad9426a016b0f34fd43ccd06c4c794c5a35c6d6edf281e7122d2a13a0f9d10c050bcaa5fe4cb9648efc3ea041f544651f4488d8230526180b24bfebb065c9c027ef23a978fedeaf94b704eea22b733fd1e479f6c456d2367cabe630cf433761418946b7c6d371189d5fa0b4bbab418d589086495c6118555826dfc645657beba434deb5d2a453efe8fac0b5096f9c5926048b793d3adef2abab6a9183895c3d3614fcbbf268a9ed845117c767487f79b06b38bd03fc62d01c1deff761732a294a97c079a1ec0c485db13366461a658d48c560928153ca563752992529b86dfab2939356df4c2a6e3df1c702adb177b1225283090bbda88fb62e12946d7bcaa767fbf996000e9452e03952f87bbdb86906bc2539efeacfce440bbe250a879afb982ee1d6ae9fefd9ffc21fd61f8ff4e197948e1a6b409b804f1eb8b565f5459a0a09de70f49edda1bac98b9812984bbdef0cb02c491de1284ed071af3e60ff8d6264c65dadf4343d807523af7e968d76079b065566376df97b92e8c9c92e107d83a911ae50fe3ce79f0e2616f4c5e483764267726ecd3925ae025272d23fd9427d17e4add6cb78bcdceeaebe26a7ba8d9e536fa0830971406963c02b0c3deeae58b03b524ed0dac42339296c44765356965aa9a6968c74287c68ae873b2112c914bc1f13e446e81fe46892f3fcae490f44f2e20f26fa43267dac040a8c56f86715510f4442c4fa51388ece2f04c4b3f9e85a5031f2bc167e2dd09c4c09f0b9f33b150aefbac650b726cec9d2f9d8abc15bc3b177bd0ef5333ab266b5aa2c1e8971e061ea1d98e244d2eb66afcea9dbc0d7ceb114711e5d89c4410c6f1e3e29ed1a6a312ae4c063d0a9d3a19684c660047abad69573284d520ff73e044752a1de8889342766577331fbf15f13b2ace5c0fbc831218d6ba60ddc9b6840b3e8e7d17eb11b79e48245d83c71a7896f4179691d2cb402028f3cbad1d7b5e9c2b07ced04bd04b74b3dfe22e62e8da12817e615957b42dc9a88d5ca12355cc69b821086e5a6317234630f5ac971c23ae303c4fde28dd9c358b1171ba01eec6a60b2c7448e1f4380449f60c8d5b4192f60b93c6a7479a6d6204d0d1f2de88ae6925a02fc72dba5af8f16f5c5b7f046db32536edb65045bd23b35ade2323789334d695ade4a11c98573aff149e1e6fb052fe5c911dfa28fbf7612c091165515481966717f432b8b95d38d3b9f9ea1584fcd19fe01fb2c5851e52c87017c4b01e7b504c108fd96f332e5a462d138769038c4d2a2ed78e11682388b6bf419ae172045bb969242bb3bc093967cfc143e9846704a634de07efff481ff7ce77dc3486cbbd3259b157e6a03e4251d36651c663b9806d67a190ea17e57621e5a8c12e65dadb40d7b0ecc52ed53945d3b280d9d2cdaa00db6884e43d62ebaf733332b9a7c3beeec6012d541554bdfcc357818e532acbd4a2fb9496c5390cc69779a2237885bcf726c5e941114a5a57125ac63aa2cb93a94d3ed48b2abd79e559bcb836e9859b7201d0fd83e128815092c1cca6fe93d76b5449df925be0570648a4e67fddcedaba82116f120c6373ff0068e11eb4d91ca8852a3684b124867ed29efc31629a5923dc76c80dd9d2188cf16b7185cae2a9549209e7b7e935bb370093cc1206cb8970f3")
x = decoder.decrypt(ciphertext)

print(x)
